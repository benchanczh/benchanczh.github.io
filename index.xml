<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Benjamin&#39;s Blog</title>
    <link>/</link>
    <description>Recent content on Benjamin&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-ca</language>
    <lastBuildDate>Sat, 08 Sep 2018 12:06:08 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Writing pandas data frames to database using SQLAlchemy</title>
      <link>/post/pandas_to_sql/</link>
      <pubDate>Sat, 08 Sep 2018 12:06:08 +0000</pubDate>
      
      <guid>/post/pandas_to_sql/</guid>
      <description>I use Python pandas for data wrangling every day. Most of the time the output of pandas data frames are .csv files saved in shared drives for business users to do further analyses. The reason why using .csv files instead of tables in a database is because most of business users in the bank don’t know how to write SQL queries!! I have no idea how they can survive in this data-driven world without even just a bit of these data analysis skills.</description>
    </item>
    
    <item>
      <title>Hive Editor in a Shiny app</title>
      <link>/post/hive_editor_in_shiny_app/</link>
      <pubDate>Mon, 27 Aug 2018 20:43:11 +0000</pubDate>
      
      <guid>/post/hive_editor_in_shiny_app/</guid>
      <description>When I was working on the network analysis of SWIFT mt103 message data, I used Apache Hive to query data from the EDL very often. My company provided me with HUE as an editor to execute SQL queries but HUE always crashed with some unknown reasons. Even the data scientists who maintained HUE didn’t know what caused this issue. The alternative could be using Python’s pyodbc or R’s DBI to connect to Hive.</description>
    </item>
    
    <item>
      <title>Euler Problem 8: Largest product in a series</title>
      <link>/post/euler_problem_8/</link>
      <pubDate>Sat, 28 Oct 2017 14:42:44 +0000</pubDate>
      
      <guid>/post/euler_problem_8/</guid>
      <description>Mathedemo  MathJax.Hub.Config({tex2jax: {inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]]}});    Euler Problem 8 The four adjacent digits in the 1000-digit number that have the greatest product are \(9 \times 9 \times 8 \times 9 = 5832\).
73167176531330624919225119674426574742355349194934 96983520312774506326239578318016984801869478851843 85861560789112949495459501737958331952853208805511 12540698747158523863050715693290963295227443043557 66896648950445244523161731856403098711121722383113 62229893423380308135336276614282806444486645238749 30358907296290491560440772390713810515859307960866 70172427121883998797908792274921901699720888093776 65727333001053367881220235421809751254540594752243 52584907711670556013604839586446706324415722155397 53697817977846174064955149290862569321978468622482 83972241375657056057490261407972968652414535100474 82166370484403199890008895243450658541227588666881 16427171479924442928230863465674813919123162824586 17866458359124566529476545682848912883142607690042 24219022671055626321111109370544217506941658960408 07198403850962455444362981230987879927244284909188 84580156166097919133875499200524063689912560717606 05886116467109405077541002256983155200055935729725 71636269561882670428252483600823257530420752963450
Find the thirteen adjacent digits in the 1000-digit number that have the greatest product.</description>
    </item>
    
    <item>
      <title>Euler Problem 7: 10001st prime</title>
      <link>/post/euler_problem_7/</link>
      <pubDate>Sat, 21 Oct 2017 15:55:11 +0000</pubDate>
      
      <guid>/post/euler_problem_7/</guid>
      <description>Mathedemo  MathJax.Hub.Config({tex2jax: {inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]]}});    You might ask why I skip Euler Problem 6. It’s because Euler Problem 6 is so easy that I don’t want to write a blog about its solution. In this post, we will discuss Euler Problem 7.
Euler Problem 7 By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.</description>
    </item>
    
    <item>
      <title>Euler Problem 5: Smallest multiple</title>
      <link>/post/euler_problem_5/</link>
      <pubDate>Fri, 20 Oct 2017 01:18:45 +0000</pubDate>
      
      <guid>/post/euler_problem_5/</guid>
      <description>Mathedemo  MathJax.Hub.Config({tex2jax: {inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]]}});    Euler Problem 5 \(2520\) is the smallest number that can be divided by each of the numbers from \(1\) to \(10\) without any remainder.
What is the smallest positive number that is evenly divisible by all of the numbers from \(1\) to \(20\)?
This problem might be a bit confusing. “Evenly divisible” actually means divisible. So, how to find out the smallest positive number that is divisible by \(1, 2, .</description>
    </item>
    
    <item>
      <title>Euler Problem 4: Largest palindrome product</title>
      <link>/post/euler_problem_4/</link>
      <pubDate>Sun, 15 Oct 2017 16:50:55 +0000</pubDate>
      
      <guid>/post/euler_problem_4/</guid>
      <description>Euler Problem 4 A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
Find the largest palindrome made from the product of two 3-digit numbers.
The solution is to search for palindrome number starting from the largest number. We check if the product of two numbers is a palindrome and replace k with it if it’s larger than k.</description>
    </item>
    
    <item>
      <title>Euler Problem 3: Largest Prime Factor</title>
      <link>/post/euler_problem_3/</link>
      <pubDate>Sun, 08 Oct 2017 19:04:09 +0000</pubDate>
      
      <guid>/post/euler_problem_3/</guid>
      <description>Mathedemo  MathJax.Hub.Config({tex2jax: {inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]]}});    In the previous post, I introduced the the Sieve of Eratosthenes to find out all prime numbers with in a certain number. In this post, I’m going to use it on the Euler Problem 3.
Euler Problem 3 The prime factors of \(13195\) are \(5, 7, 13\) and \(29\).
What is the largest prime factor of the number \(600851475143\)?</description>
    </item>
    
    <item>
      <title>Using Sieve of Eratosthenes to find prime numbers</title>
      <link>/post/sieve_of_eratosthenes/</link>
      <pubDate>Mon, 25 Sep 2017 18:56:02 +0000</pubDate>
      
      <guid>/post/sieve_of_eratosthenes/</guid>
      <description>Mathedemo  MathJax.Hub.Config({tex2jax: {inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]]}});    We know a prime number is a natural number greater than 1 has no positive divisors other than 1 and itself. If Someone asks you, “What are all prime numbers less than 1 million?”, how can you answer the question?
There are many algorithms to find all prime numbers up to any given limit. I’m going to cover the Sieve of Eratosthenes, a simple but powerful algorithm, in this article.</description>
    </item>
    
    <item>
      <title>Euler Problem 2: Even Fibonacci numbers</title>
      <link>/post/euler_problem_2/</link>
      <pubDate>Sat, 23 Sep 2017 12:01:46 +0000</pubDate>
      
      <guid>/post/euler_problem_2/</guid>
      <description>Mathedemo  MathJax.Hub.Config({tex2jax: {inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]]}});    Euler Problem 2 Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
\[1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\]
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.</description>
    </item>
    
    <item>
      <title>Project Euler Solutions in R and Python</title>
      <link>/post/euler_problem_1/</link>
      <pubDate>Sat, 16 Sep 2017 18:29:24 +0000</pubDate>
      
      <guid>/post/euler_problem_1/</guid>
      <description>Mathedemo  MathJax.Hub.Config({tex2jax: {inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]]}});    The Devil is in the Data website presents solutions to Project Euler problems in R. Project Euler (named after Swiss mathematician Leonhard Euler) is a competition with computational problems. Participants solve these problems using computer code, using many different languages.
This blog was inspired by Devil is in the Data and tries to provide detailed solution in both R and Python to a Euler problem per week.</description>
    </item>
    
    <item>
      <title>Using learnr to build an interactive R tutorial</title>
      <link>/post/tidyverse_tutorial_on_learnr/</link>
      <pubDate>Sat, 16 Sep 2017 16:25:50 +0000</pubDate>
      
      <guid>/post/tidyverse_tutorial_on_learnr/</guid>
      <description>In June 2017, I joined a major Canadian bank as a data analyst. I was suprised that most of my colleagues didn’t use R or Python for their day-to-day data analysis. I’ve been convincing my colleagues that R and Python are great tools for data analysis and trying to give an introduction on these two programming languages.
Last week I saw a post about learnr package on RStudio Developer Blog and I believed this package would be a great tool to create an interactive R tutorial for my team.</description>
    </item>
    
  </channel>
</rss>